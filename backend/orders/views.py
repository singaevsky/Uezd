# backend/orders/views.py
from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync

from .models import Order
from .serializers import OrderSerializer
from telegram.bot import send_telegram_message
from telegram.client_bot import notify_user_about_status_change


def broadcast_order_update(order_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤—Å–µ–º –≤ –≥—Ä—É–ø–ø–µ 'orders' —á–µ—Ä–µ–∑ WebSocket
    """
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.group_send)(
        "orders",
        {
            "type": "send_order_update",
            "event": "order_updated",
            "data": order_data
        }
    )


class OrderViewSet(viewsets.ModelViewSet):
    serializer_class = OrderSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        if user.role in ['chef', 'admin']:
            return Order.objects.all().order_by('-created_at')
        return Order.objects.filter(user=user).order_by('-created_at')

    @action(detail=True, methods=['patch'], permission_classes=[IsAuthenticated])
    def update_status(self, request, pk=None):
        try:
            order = Order.objects.get(id=pk)
            new_status = request.data.get('status')

            allowed_statuses = ['new', 'preparing', 'ready', 'delivered', 'cancelled']
            if new_status not in allowed_statuses:
                return Response({'error': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å'}, status=status.HTTP_400_BAD_REQUEST)

            # –¢–æ–ª—å–∫–æ –∫–æ–Ω–¥–∏—Ç–µ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å (–∫—Ä–æ–º–µ –æ—Ç–º–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç–æ–º)
            if request.user.role not in ['chef', 'admin'] and new_status != 'cancelled':
                return Response({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω'}, status=status.HTTP_403_FORBIDDEN)

            order.status = new_status
            order.save()

            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            serializer = OrderSerializer(order)

            # –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            broadcast_order_update(serializer.data)

            return Response(serializer.data)

        except Order.DoesNotExist:
            return Response({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)
# –í –∫–æ–Ω—Ü–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if order.user.telegram_id:
        notify_user_about_status_change(order.user.telegram_id, order.id, order.status)

# –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
message = f"""
üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order.id}</b>
–î–∞—Ç–∞: {order.delivery_date}
–í—Ä–µ–º—è: {order.delivery_time}
–ê–¥—Ä–µ—Å: {order.delivery_address}
–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}
–°—É–º–º–∞: {order.total_price} ‚ÇΩ

–¢–æ–≤–∞—Ä—ã:
"""
for item in order.items.all():
    message += f"‚Ä¢ {item.product.name} ‚Äî {item.quantity} —à—Ç.\n"

send_telegram_message(message)

# –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
from telegram.client_bot import notify_user_about_status_change

if order.user.telegram_id:
    notify_user_about_status_change(order.user.telegram_id, order.id, order.status)
