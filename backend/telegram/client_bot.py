# backend/telegram/client_bot.py
import telebot
from telebot import types
from django.conf import settings
from django.utils import timezone
from datetime import datetime
import re

from users.models import User
from products.models import Product, Filling
from orders.models import Order
from .models import DesignRequest  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
from ..utils.validators import is_valid_phone

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from ..bot import send_telegram_message

bot = telebot.TeleBot(settings.TELEGRAM_CLIENT_BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}


# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user, created = User.objects.get_or_create(
        username=str(message.chat.id),
        defaults={'first_name': message.from_user.first_name, 'role': 'customer'}
    )
    user.telegram_id = message.chat.id
    user.save()

    welcome = f"""
    –ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéÇ

    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –£–µ–∑–¥–Ω–æ–º—É –ö–æ–Ω–¥–∏—Ç–µ—Ä—É ‚Äî –∞–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç–æ—Ä—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑.

    –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:
    /catalog ‚Äî –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ—Ä—Ç–æ–≤
    /myorders ‚Äî –ú–æ–∏ –∑–∞–∫–∞–∑—ã
    /promo ‚Äî –ê–∫—Ü–∏–∏
    /order ‚Äî –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    /design ‚Äî –ó–∞–≥—Ä—É–∑–∏—Ç—å —ç—Å–∫–∏–∑
    /help ‚Äî –ü–æ–º–æ—â—å
    """
    bot.reply_to(message, welcome)


# –ö–∞—Ç–∞–ª–æ–≥
@bot.message_handler(commands=['catalog'])
def send_catalog(message):
    products = Product.objects.filter(is_active=True)[:10]
    if not products:
        bot.reply_to(message, "–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç.")
        return

    for p in products:
        text = f"<b>{p.name}</b>\n{p.description}\n–¶–µ–Ω–∞ –æ—Ç {p.base_price} ‚ÇΩ"
        try:
            bot.send_photo(message.chat.id, p.image.url, caption=text, parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            bot.send_message(message.chat.id, text, parse_mode='HTML')


# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
@bot.message_handler(commands=['myorders'])
def send_orders(message):
    try:
        user = User.objects.get(telegram_id=message.chat.id)
        orders = Order.objects.filter(user=user).order_by('-created_at')
        if not orders:
            bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return
        for order in orders:
            status_text = {
                'new': 'üÜï –ù–æ–≤—ã–π',
                'preparing': 'üßÅ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
                'ready': '‚úÖ –ì–æ—Ç–æ–≤',
                'delivered': 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
            }.get(order.status, order.status)
            text = f"""
            <b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b>
            –°—Ç–∞—Ç—É—Å: {status_text}
            –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_date}
            –°—É–º–º–∞: {order.total_price} ‚ÇΩ
            """
            bot.send_message(message.chat.id, text, parse_mode='HTML')
    except User.DoesNotExist:
        bot.reply_to(message, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")


# –ê–∫—Ü–∏–∏
@bot.message_handler(commands=['promo'])
def send_promo(message):
    promo = """
    üéâ <b>–ê–∫—Ü–∏—è –º–µ—Å—è—Ü–∞!</b>

    –°–∫–∏–¥–∫–∞ 15% –Ω–∞ —Ç–æ—Ä—Ç—ã –∫ –ù–æ–≤–æ–º—É –≥–æ–¥—É!
    –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ 31 –¥–µ–∫–∞–±—Ä—è.

    –ü—Ä–æ–º–æ–∫–æ–¥: <code>CAKE15</code>
    """
    bot.send_message(message.chat.id, promo, parse_mode='HTML')


# –ü–æ–º–æ—â—å
@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start ‚Äî –ù–∞—á–∞–ª–æ
    /catalog ‚Äî –ö–∞—Ç–∞–ª–æ–≥
    /myorders ‚Äî –ú–æ–∏ –∑–∞–∫–∞–∑—ã
    /promo ‚Äî –ê–∫—Ü–∏–∏
    /order ‚Äî –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    /design ‚Äî –ó–∞–≥—Ä—É–∑–∏—Ç—å —ç—Å–∫–∏–∑
    /cancel ‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    /help ‚Äî –ü–æ–º–æ—â—å
    """
    bot.reply_to(message, help_text)


# –û—Ç–º–µ–Ω–∞
@bot.message_handler(commands=['cancel'])
def cancel_action(message):
    if message.chat.id in user_state:
        del user_state[message.chat.id]
        bot.reply_to(message, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        bot.reply_to(message, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")


# –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Å–∫–∏–∑–∞
@bot.message_handler(commands=['design'])
def request_design(message):
    bot.reply_to(message, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —ç—Å–∫–∏–∑–∞ —Ç–æ—Ä—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    filename = f"design_{message.chat.id}_{message.message_id}.jpg"
    filepath = f"media/designs/{filename}"

    with open(filepath, 'wb') as new_file:
        new_file.write(downloaded_file)

    try:
        user = User.objects.get(telegram_id=message.chat.id)
        DesignRequest.objects.create(
            user=user,
            image=filepath,
            comment="–ó–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ Telegram"
        )
        bot.reply_to(message, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à —ç—Å–∫–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    except User.DoesNotExist:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")


# –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑
@bot.message_handler(commands=['order'])
def start_order(message):
    user_state[message.chat.id] = {'step': 'event'}

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–°–≤–∞–¥—å–±–∞')
    markup.add('8 –ú–∞—Ä—Ç–∞', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤')

    bot.send_message(message.chat.id, "üéØ –î–ª—è –∫–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Ç–æ—Ä—Ç?", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
@bot.message_handler(func=lambda message: message.chat.id in user_state)
def handle_order_flow(message):
    chat_id = message.chat.id
    state = user_state[chat_id]
    step = state['step']

    if step == 'event':
        state['event'] = message.text
        state['step'] = 'weight'

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add('1 –∫–≥', '2 –∫–≥')
        bot.send_message(chat_id, "‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å —Ç–æ—Ä—Ç–∞:", reply_markup=markup)

    elif step == 'weight':
        try:
            state['weight'] = float(message.text.replace(' –∫–≥', ''))
            state['step'] = 'filling'

            fillings = Filling.objects.all().order_by('name')
            if not fillings:
                bot.send_message(chat_id, "–ù–∞—á–∏–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                return

            markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for filling in fillings:
                markup.add(filling.name)
            bot.send_message(chat_id, "üßÅ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É:", reply_markup=markup)
        except Exception as e:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    elif step == 'filling':
        filling_name = message.text
        try:
            filling = Filling.objects.get(name=filling_name)
            state['filling_id'] = filling.id
            state['step'] = 'date'
            bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–ì–ì–ì–ì-–ú–ú-–î–î):")
        except Filling.DoesNotExist:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∏–Ω–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.")

    elif step == 'date':
        try:
            delivery_date = datetime.strptime(message.text, '%Y-%m-%d').date()
            if delivery_date < timezone.now().date():
                bot.send_message(chat_id, "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
                return
            state['date'] = delivery_date
            state['step'] = 'phone'
            bot.send_message(chat_id, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")

    elif step == 'phone':
        phone = message.text.strip()
        if not is_valid_phone(phone):
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67")
            return

        state['phone'] = phone
        confirm_order(chat_id)
        del user_state[chat_id]


def notify_user_about_status_change(telegram_id, order_id, status):
    status_text = {
        'new': 'üÜï –ù–æ–≤—ã–π',
        'preparing': 'üßÅ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'ready': '‚úÖ –ì–æ—Ç–æ–≤',
        'delivered': 'üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
    }.get(status, status)

    try:
        bot.send_message(
            telegram_id,
            f"üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –∏–∑–º–µ–Ω—ë–Ω:\n"
            f"<b>{status_text}</b>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ /myorders",
            parse_mode='HTML'
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


def confirm_order(chat_id):
    state = user_state.get(chat_id)
    if not state:
        return

    try:
        user = User.objects.get(telegram_id=chat_id)
        filling = Filling.objects.get(id=state['filling_id'])

        price = calculate_price(state['weight'], filling.price_multiplier)

        # ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî –≤–Ω—É—Ç—Ä–∏ try, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        order = Order.objects.create(
            user=user,
            status='new',
            total_price=price,
            delivery_date=state['date'],
            delivery_time='12:00',
            payment_method='cash',
            phone=state['phone'],
            comment=f"–¢–æ—Ä—Ç –Ω–∞ {state['event']}, –Ω–∞—á–∏–Ω–∫–∞: {filling.name}",
            source='telegram'  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        )

        bot.send_message(
            chat_id,
            f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order.id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"–°—É–º–º–∞: {price} ‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {state['date']} –≤ 12:00\n"
            f"–û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        send_telegram_message(f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ Telegram: ‚Ññ{order.id} –Ω–∞ {state['event']}")

    except User.DoesNotExist:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Filling.DoesNotExist:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–∞—á–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")


def calculate_price(weight, multiplier):
    base_price = 1800
    return int(base_price * weight * multiplier)


def start_bot():
    print("‚úÖ Telegram-–±–æ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
